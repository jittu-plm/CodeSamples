/**
 * Leetcode Sample - Sum of Subarray Ranges */
 /*
 Problem statement as given Leet code -
 * You are given an integer array nums. The range of a subarray of nums is the difference between the largest and smallest element in the subarray.
 *
 * Return the sum of all subarray ranges of nums.
 *
 * A subarray is a contiguous non-empty sequence of elements within an array.
 *
 *
 *
 * Example 1:
 *
 * Input: nums = [1,2,3]
 * Output: 4
 * Explanation: The 6 subarrays of nums are the following:
 * [1], range = largest - smallest = 1 - 1 = 0
 * [2], range = 2 - 2 = 0
 * [3], range = 3 - 3 = 0
 * [1,2], range = 2 - 1 = 1
 * [2,3], range = 3 - 2 = 1
 * [1,2,3], range = 3 - 1 = 2
 * So the sum of all ranges is 0 + 0 + 0 + 1 + 1 + 2 = 4.
 * Example 2:
 *
 * Input: nums = [1,3,3]
 * Output: 4
 * Explanation: The 6 subarrays of nums are the following:
 * [1], range = largest - smallest = 1 - 1 = 0
 * [3], range = 3 - 3 = 0
 * [3], range = 3 - 3 = 0
 * [1,3], range = 3 - 1 = 2
 * [3,3], range = 3 - 3 = 0
 * [1,3,3], range = 3 - 1 = 2
 * So the sum of all ranges is 0 + 0 + 0 + 2 + 0 + 2 = 4.
 * Example 3:
 *
 * Input: nums = [4,-2,-3,4,1]
 * Output: 59
 * Explanation: The sum of all subarray ranges of nums is 59.
 *
 *
 * Constraints:
 *
 * 1 <= nums.length <= 1000
 * -109 <= nums[i] <= 109
 */

/**
 * This code is exceeding time limit for the input -
 * [-16336,35717,59869,15329,-40421,-80784,12970,78619,-37615,-88966,77048,-10127,80101,-72898,-67909,-34352,98490,-91398,93165,94757,-70285,6531,58938,-8889,43423,38126,-57618,-7354,-11192,-86475,-15537,-37296,38914,-9573,-65416,90603,-80869,-16374,93475,-35365,-98090,-35289,65507,23087,-84689,-71740,48003,48434,29514,69651,-9158,-55708,51956,62681,-81516,-68622,-27454,48243,-87262,-98011,17189,47907,-38658,70473,-58309,-15523,76150,68205,-11999,-70821,20227,-98074,-93192,52886,36352,-78872,-9747,29757,65050,-40341,-21799,60422,-15578,-37906,36435,-69859,-39980,-37805,-31287,12752,60382,-87143,83937,-87061,83555,76375,15630,-18648,43619,-31313,-24969,-10355,81945,72093,-19413,-27292,-3725,1984,99732,21041,-2351,43681,27250,76577,-92722,-57506,-10699,42960,-41222,2631,-94167,80801,63445,79334,68022,24532,-58422,-12172,21683,-79888,85496,38517,-9449,94136,67872,64758,-96049,65994,13086,83780,65952,-69918,-9294,-25927,-75439,20114,-85339,60755,-37956,-78430,80129,58291,-74173,87754,70513,89
 *
 * Need to write some optimized solution
 */

package com.jiten.samples;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public class LeetCodePracticeSumOfSubarrayRanges {
    public static void main(String[] args) {
        LeetCodePracticeSumOfSubarrayRanges codePractice = new LeetCodePracticeSumOfSubarrayRanges();
//        int[] nums = new int[]{4,-2,-3,4,1};
        int[] nums = new int[]{17671,68570,-67691,-29891,64359,58138,35697,96139,33791,-56267,-60720,-140,-28266,-70985,-2886,-53492,62487,-49313,91147,91166,49515,-30580,-95144,95567,42889,13327,92074,62256,-24019,58316,6541,63034,22651,-68414,55429,20088,-2818,14212,-37525,73499,-18291,61656,-60186,47714,41718,-54683,-28052,-72990,-5489,-62659,88879,-8231,26546,-1229,-35491,-26824,-11662,98691,-66297,78061,-1688,-98583,82539,-15202,93473,39368,-93483,-47878,59607,-16004,45430,-99911,-5586,28542,32303,-71981,98552,34578,-45113,-3760,-54281,50978,907,-62065,35131,-79,-90116,92365,22173,68001,63091,40286,-30938,86216,-99889,7696,40892,29865,-62989,-79326,28713,-24834,88976,-66283,83131,93261,35987,-71034,32667,-30716,8983,-84980,-50685,-63620,-93752,38046,-91950,-36963,32371,-33447,-17151,-96076,-20176,49554,-33524,8665,96799,-61956,2548,-45494,63047,65460,-4585,-64729,-61152,10464,-39152,-96480,75171,-41063,97484,-33582,63417,-593,67919,92870,12144,-23672,504,59468,50078,-30617,1386,60999,75377,-97127,32759,77843,87860,-74155,64154,-88769,-45142,20845,-57506,-43629,70515,-56415,-73165,-63001,13046,41650,65410,13139,-83346,6065,-87882,-15974,2998,-73489,52605,69137,56969,97486,-25473,41808,23052,90496,-7203,-94835,-49472,-65739,81047,87633,-43647,74379,-13592,-46884,-43983,-81541,82334,-87223,-71903,44840,5971,88531,-80476,-72425,-30854,-43801,16456,-35919,19576,18869,82885,-39472,-53187,86427,-80055,96648,-13631,42798,-54561,-69463,-85876,-58580,-24834,10520,3239,-89411,22070,-86143,-14723,-38123,-8175,-6482,39391,31982,-11415,-83310,-21724,-70995,-18725,53941,-48366,67417,78245,-72510,40692,37911,43700,-63059,10831,82812,-49561,-103,47097,35825,-51476,-73407,-79161,-58926,-66159,73551,61625,-50225,6661,-10383,-59855,-93589,21647,44923,-65608,334,31547,-97067,-78775,60927,65225,-18662,44110,-68379,96494,90235,-19975,-92297,4972,91199,-11332,15010,72061,23868,-38769,-32069,1503,-44288,54716,-13220,-71721,98004,74311,-111,33025,10119,-43354,27461,-42629,91376,-62870,41354,-51779,25460,-41321,-28579,32663,31777,-78028,-31171,-59214,23859,-12043,64675,-95622,23517,-42835,80510,74440,-30254,-85683,25269,38737,41768,-92494,51948,41625,9794,-11755,-55374,-54547,53583,97334,96246,-66035,-48063,-60806,-9060,-27206,-26990,-17930,48516,-67115,-31753,13180,-84906,69981,80514,35513,78822,-671,-74870,-41691,-19984,3715,29547,92392,24021,20953,52816,57191,41587,2237,-11125,-37559,-18646,47237,-25821,-41506,77806,-85278,-35152,-83990,-63489,-51726,22326,86156,26177,20115,-19013,53741,31890,-28890,82358,-38464,-69786,50190,54807,4606,-52600,58823,6720,-93258,87955,84367,38567,33609,32040,-42105,12543,-47811,93440,-20063,27634,74045,-64444,49742,-30904,-32138,-90116,28903,47219,79482,92516,20749,61905,56866,-19793,6853,-169,53980,-58840,-439,-81676,28099,89840,8228,14685,83173,27232,14243,12244,-54002,-39283,22386,38093,-79763,7637,-82353,-33772,59565,-86563,-16464,-6614,69408,94728,33245,82719,72438,36373,-5777,-91382,44277,3485,-80839,-1224,37131,-34077,-35256,79895,57414,39505,98584,-15537,18508,-12106,95212,-55611,-76966,-96382,48729,45894,23333,22816,28921,-3751,-67601,17926,-68998,-92731,-92058,2191,-94517,-86111,-73657,26605,6531,-65292,-3806,78748,-99785,92925,79591,-21356,-72693,58534,24065,-71918,-28814,-40566,-44089,-28753,72290,85175,43085,93414,9470,-3000,59262,83444,-4662,-89570,15862,-48884,-6204,17072,-71226,-81864,22330,89140,-76558,-68756,-27726,-28331,2039,14812,-16309,89329,72681,-8456,28425,96053,29451,-79837,-18798,-52560,78916,-36744,-72487,53339,-79673,57664,18044,85251,-51268,-4766,-61158,-50767,-73577,-32603,13831,-90479,-3688,-64234,52840,-65494,65766,-89125,43541,92878,-59737,28349,-7909,-99423,46183,765,18986,71345,51199,-10860,-59923,76956,71811,-8616,-40223,40346,-16161,68756,-44478,-90685,7591,49312,-83322,-7156,87673,4320,61390,-35459,9990,2980,38978,-39330,90155,64946,-63144,-6990,56066,-6204,-269,38159,482,24311,-70746,35531,27703,83341,33485,-86216,-69140,76409,-1041,-77500,92848,-60205,39768,-53863,78416,-56900,6039,-20172,-62374,-11270,98855,-35969,-47563,90994,65842,-15323,-14768,92603,41147,-10143,50862,-57528,57822,-35508,-91621,32364,-13424,57884,72396,-84246,88076,51368,-55310,53559,-72413,-66617,-53992,-21071}  ;
        System.out.println("range = " + codePractice.subArrayRanges(nums));
    }

    public long subArrayRanges(int[] nums) {
        List<Integer> list = Arrays.stream( nums ).boxed().collect( Collectors.toList() );
//        Collections.sort(list);

        long range = 0;
        /*for(int i=list.size()-1; i >=0; i--){
            for(int j=i-1;j >=0; j--){
                range += list.get(i)-list.get(j);
            }
        }
        System.out.println("range = " + range);*/

        int start = 0, end = 0;
        List<Integer> subList = null;
        for(int i=0; i< list.size();i++) {
            end = list.size();
            for (int j = 0; j < list.size(); j++) {
//                System.out.println(start + "::" + end);
                if(end > start)
                subList = list.subList(start, end);
                range += getRange(subList);
                end--;
            }
            start++;
        }

        return range;
    }



    private int getRange(List<Integer> subList) {
        int min = 0, max = 0;
        min = max = subList.get(0);
        for (int i=0; i< subList.size(); i++) {
            if(max < subList.get(i)){
                max = subList.get(i);
            }
            if (min > subList.get(i)){
                min = subList.get(i);
            }
        }
//        System.out.println("max:" + max + " - min:" + min);
        return max-min;
    }
}

class Solution {
    public long subArrayRanges(int[] nums) {
        List<Integer> list = Arrays.stream( nums ).boxed().collect( Collectors.toList() );
        Collections.sort(list);

        int range = 0;
        for(int i=list.size()-1; i > 0; i--){
            for(int j=i-1;j >0; j--){
                range += list.get(i)-list.get(j);
            }
        }
//        System.out.println("range = " + range);
        return range;
    }
}
